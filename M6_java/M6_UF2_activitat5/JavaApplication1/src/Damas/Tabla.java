/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package Damas;

import Damas.entity.Moviment;
import Damas.entity.MovimentId;
import Damas.entity.Partida;
import static Damas.util.HibernateUtil.sessionFactory;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.NamingException;
import javax.naming.Reference;
import javax.swing.JOptionPane;
import org.hibernate.Cache;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionBuilder;
import org.hibernate.SessionFactory;
import org.hibernate.StatelessSession;
import org.hibernate.StatelessSessionBuilder;
import org.hibernate.TypeHelper;
import org.hibernate.engine.spi.FilterDefinition;
import org.hibernate.metadata.ClassMetadata;
import org.hibernate.metadata.CollectionMetadata;
import org.hibernate.metamodel.source.annotations.xml.mocker.MockHelper;
import org.hibernate.stat.Statistics;

/**
 *
 * @author Alumne
 */
public class Tabla extends javax.swing.JFrame {
    private boolean jugaX = true;
    private boolean jugaO = false;
    private int filaOrigen = -1;
    private int columnaOrigen = -1;
    private int numMov = 0;
    private int idPartida;
    Date date = new Date(System.currentTimeMillis());
    Partida partida = new Partida(date, numMov, "-");
    MovimentId movimentId = new MovimentId(0, 0);
    Moviment moviment = new Moviment(movimentId, partida, "-");
    Set<Moviment> moviments=new HashSet<Moviment>();
    List<Moviment> movs;
    /**
     * Creates new form NewJFrame
     */
    public Tabla() {
        Session session = Damas.util.HibernateUtil.sessionFactory.openSession();
        session.beginTransaction();
        session.save(partida);
        session.save(moviment);
        session.getTransaction().commit();
        session.close();
        initComponents();
    }
    
    public Tabla(int id) {
        partida.setIdPartida(30);
        
        Session session = Damas.util.HibernateUtil.sessionFactory.openSession();
        session.beginTransaction();
        Query query = session.createQuery("FROM Moviment m WHERE m.id.idPartida ="+ id);
        movs = query.list();
        query = session.createQuery("FROM Moviment m WHERE m.id.idPartida ="+id+" ORDER BY m.id.numMoviment DESC");
        numMov = movs.get(movs.size()-1).id.getNumMoviment();
        session.update(partida);
        session.getTransaction().commit();
        session.close();
        initComponents();
        for (int a = 0; a < movs.size(); a++) {
            String taula = movs.get(a).getTaula();
            for (int i = 0; i < 8; i++) {
                for (int j = 0; j < 8; j++) {
                    char pos = taula.charAt((i*8) + j);
                    if (pos == ' ') {
                        jtTabla.setValueAt("", i, j);
                    } else if (pos == 'O') {
                        jtTabla.setValueAt("O", i, j);
                    } else {
                        jtTabla.setValueAt("X", i, j);
                    }
                }
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtTabla = new javax.swing.JTable();
        jbComenzar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "O", "", "O", "", "O", "", "O"},
                {"O", "", "O", "", "O", "", "O", ""},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {"", "X", "", "X", "", "X", "", "X"},
                {"X", "", "X", "", "X", "", "X", null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtTabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtTablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtTabla);

        jbComenzar.setText("Sortir");
        jbComenzar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbComenzarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(164, 164, 164)
                .addComponent(jbComenzar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jbComenzar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtTablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtTablaMouseClicked
        int row = obtenirFilaClicada();
        int col = obtenirColumnaClicada();
        
        if (noHiHaOrigen()) {
            if (jugaX && esX(row, col)) {
                actualitzaNouOrigen(row, col);
            } else if (jugaO && esO(row, col)) {
                actualitzaNouOrigen(row, col);
            } else {
                 JOptionPane.showMessageDialog(rootPane, "Selecciona Origen Valido.");
            }
        } else {
            if (ocupatPropi(row, col)) {
                actualitzaNouOrigen(row, col);
            } else if (movimentValid(row, col)) {
                if (esBuit(row, col) || ocupatContrari(row, col)) {
                    numMov = numMov + 1;
                    mou(row, col);
                    
                    String tabla = "";
                    for (int i = 0; i < 8; i++) {
                        for (int j = 0; j < 8; j++) {
                            if (jtTabla.getValueAt(i, j) == null || ((String)jtTabla.getValueAt(i, j)).equals("")) {
                                tabla += " ";
                            } else if (((String) jtTabla.getValueAt(i, j)).equals("O")) {
                                tabla += "O";
                            } else {
                                tabla += "X";
                            }
                        }
                    }
                    System.out.println(tabla);
                    
                    MovimentId movimentId = new MovimentId(idPartida, numMov);
                    Moviment moviment = new Moviment(movimentId, partida, tabla);
                    moviments.add(moviment);
                    System.out.println(moviments);
                    
                    Session session = Damas.util.HibernateUtil.sessionFactory.openSession();
                    session.beginTransaction();
                    partida.setMoviments(moviments);
                    partida.setNumMoviments(numMov);
                    session.update(partida);
                    session.update(moviment);
                    session.getTransaction().commit();
                    session.close();
                    
                    if (jugaX) {
                        jugaX = false;
                        jugaO = true;
                    } else {
                        jugaX = true;
                        jugaO = false;
                    }
                    filaOrigen = -1;
                    columnaOrigen = -1;
                }
            } else {
               JOptionPane.showMessageDialog(rootPane, "Selecciona Movimiento Valido.");
            }
        }
    }//GEN-LAST:event_jtTablaMouseClicked

    private void jbComenzarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbComenzarActionPerformed

    }//GEN-LAST:event_jbComenzarActionPerformed
    
    private int obtenirFilaClicada() {
        return jtTabla.getSelectedRow();
    }
    
    private int obtenirColumnaClicada() {
        return jtTabla.getSelectedColumn();
    }
    
    private boolean noHiHaOrigen() {
        if (filaOrigen == -1 || columnaOrigen == -1) {
            return true;
        }
        return false;
    }
    
    private boolean esX(int row, int col) {
        String x = (String) jtTabla.getValueAt(row, col);
        if (esBuit(row, col)) {
           return false;
       }
        if (x.equals("X")) {
            return true;
        }
        return false;
    }
    
    private boolean esO(int row, int col) {
        String o = (String) jtTabla.getValueAt(row, col);
        if (esBuit(row, col)) {
           return false;
       }
        if (o.equals("O")) {
            return true;
        }
        return false;
    }
    
    private void actualitzaNouOrigen(int row, int col) {
        filaOrigen = row;
        columnaOrigen = col;
    }
    
    private boolean movimentValid(int fila, int columna) {
        if (jugaX) {
            if ((filaOrigen - 1) == fila &&
                    ((columnaOrigen + 1) == columna ||
                    (columnaOrigen - 1) == columna))
                return true;
        } else if (jugaO) {
            if ((filaOrigen + 1) == fila &&
                    ((columnaOrigen + 1) == columna ||
                    (columnaOrigen - 1) == columna))
                return true;
        }
        return false;
    }
    
    private boolean esBuit(int row, int col) {
        String vacio = (String)jtTabla.getValueAt(row, col);
        if (vacio == null) {
            return true;
        }
        return false;
    }
    
    private boolean ocupatContrari(int row, int col) {
        String vacio = (String)jtTabla.getValueAt(row, col);
        if (esBuit(row, col)) {
           return false;
       }
        if (jugaX) {
            if (vacio.equals("O")) {
                return true;
            }
        } else if (jugaO){
            if (vacio.equals("X")) {
                return true;
            }
        }
        return false;
    }
            
    private void mou(int row, int col) {
        jtTabla.setValueAt(null, filaOrigen, columnaOrigen);
        if (jugaX) {
            jtTabla.setValueAt("X", row, col);
        } else {
            jtTabla.setValueAt("O", row, col);
        }
    }
    
    private boolean ocupatPropi(int row, int col) {
       String vacio = (String)jtTabla.getValueAt(row, col);
       if (esBuit(row, col)) {
           return false;
       }
       if (jugaX) {
            if (vacio.equals("X")) {
                return true;
            }
        } else if (jugaO){
            if (vacio.equals("O")) {
                return true;
            }
        }
        return false;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tabla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tabla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tabla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tabla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tabla().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbComenzar;
    private javax.swing.JTable jtTabla;
    // End of variables declaration//GEN-END:variables
}
